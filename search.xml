<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网盘项目笔记</title>
      <link href="/2023/09/20/%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/20/%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="cloud-disk"><a href="#cloud-disk" class="headerlink" title="cloud_disk"></a>cloud_disk</h1><blockquote><p>云盘项目: <a href="https://github.com/Cui7Shark/cloud_disk">https://github.com/Cui7Shark/cloud_disk</a></p></blockquote><h2 id="1-项目总体架构"><a href="#1-项目总体架构" class="headerlink" title="1. 项目总体架构"></a>1. 项目总体架构</h2><p>首先搭建fastdfs分布式文件服务器集群，再利用ngnix反向代理服务器，接收并处理用户的请求，其中还使用了FastCGI+spawn-fcgi配合nginx工作；<br>然后还用到了MySQL和Redis数据库，其中MySQL用于存储文件的信息，Redis呢主要用于存储用户注册登录之类的鉴权信息。</p><span id="more"></span><p>主要工作流程是用户通过浏览器（或者客户端）发送操作请求到web服务器，也就是由nginx反向代理的web服务器。然后fastCGI+spawn-fcgi模块创建进程来接收通过web服务器而来的用户请求，并交由fastDFS文件系统处理，并返回处理后的结果给web服务器，web服务器再将结果展示给用户。<br>————————————————</p><img src="https://img-blog.csdnimg.cn/20200807220321547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDUzMjg1,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 67%;" /><ul><li><p>Qt制作云盘客户端 （实现文件上传、下载、删除、分享功能）</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721200700748.png" alt="image-20230721200700748"></p></li><li><p>服务端：</p><ul><li><strong>nginx</strong>作为代理服务器，转发客户端请求给后台FastCGI进行处理</li><li><strong>FastCGI</strong>对Nginx转发过来的请求进行解析处理。</li><li><strong>FastDFS</strong>集群中storage节点保存着客户端的文件。</li><li><strong>Redis</strong>保存着客户端的信息（token）等。</li><li><strong>MySQL</strong>保存着用户、文件的信息。</li></ul></li><li><p><strong>项目包含的技术大概有：</strong></p><ul><li>Qt客户端的编写。</li><li>Nginx的配置（配置FastCGI模块、配置FastDFS模块）。</li><li>FsatCGI的使用。</li><li>FastDFS的使用。</li><li>Redis、MySQL的使用。</li><li>HTTP接口的使用。</li><li>JSON协议解析。</li></ul></li></ul><hr><h2 id="2-Nginx技术"><a href="#2-Nginx技术" class="headerlink" title="2. Nginx技术"></a>2. Nginx技术</h2><ul><li>俄罗斯人开发</li><li>C语言编写</li><li>开源</li></ul><ol><li><p>用途</p><ol><li>做web服务器</li><li>反向代理服务器</li><li>邮件服务</li></ol></li><li><p>特性</p><ul><li>可实现负载均衡、缓存、访问控制、带宽控制等功能</li><li>可并发处理百万级的TCP连接</li><li>高扩展，模块化</li><li>可以热部署 ，master和worker的分离设计，可实现7*24小时不间断服务的前提下升级nginx可执行文件。</li><li>最自由 - BSD开源协议</li><li>更快</li><li>可靠</li><li>低内存消耗</li></ul></li><li><p>源码安装</p><ul><li><p>下载Nginx源码包</p></li><li><p>所需的三个库</p><ul><li>PCRE库：Nginx的HTTP模块使用它来解析正则表达式</li><li>zlib ：对HTTP数据包做gzip格式的压缩，以减少网络传输量</li><li>openssl库 ：支持SSL协议， 安全传输HTTP， MD5使用需要</li></ul></li><li><p>编译安装：</p><ul><li>解压</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">软件版本需要注意，不一致可能会安装失败</span></span><br><span class="line">tar xzf nginx-1.10.1.tar.gz</span><br><span class="line">tar xzf openssl-1.0.1t.tar.gz</span><br><span class="line">tar xjf pcre-8.40.tar.bz2</span><br><span class="line">tar xzf zlib-1.2.11.tar.gz</span><br></pre></td></tr></table></figure><ul><li>进入相应源码包 (先装三个库，再装Nginx)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Nginx</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_realip_module --with-http_addition_module --with-http_gzip_static_module --with-http_secure_link_module --with-http_stub_status_module --with-stream --with-pcre=/home/build/pcre-8.40 --with-zlib=/home/build/zlib-1.2.11 --with-openssl=/home/build/openssl-1.0.1t</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一般有Makefile 直接make make install</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">没有就 ./configure 后 在make</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>文件位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Nginx会安装在</span></span><br><span class="line">/usr/local/ </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置文件 配置文件能够决定Nginx及其模块的工作方式</span></span><br><span class="line">/usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">二进制程序</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志 （报错时需要看error.log）</span></span><br><span class="line">/usr/local/nginx/logs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">网页</span></span><br><span class="line">/usr/local/nginx/html</span><br></pre></td></tr></table></figure></li><li><h3 id="第三方模块的安装步骤"><a href="#第三方模块的安装步骤" class="headerlink" title="第三方模块的安装步骤"></a>第三方模块的安装步骤</h3><ul><li>①定位你想要使用的模块</li><li>②下载该模块</li><li>③解压缩源代码安装包。</li><li>④如果有README文件，那么阅读README文件， 查看在安装中是否有依赖安装</li><li>⑤通过下面的命令选项配置使用该模块</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure -add-module=&lt;path&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="Linux内核参数的优化"><a href="#Linux内核参数的优化" class="headerlink" title="Linux内核参数的优化"></a>Linux内核参数的优化</h3><ul><li><strong>需要修改Linux内核参数，使得Nginx可以拥有更高的性能</strong></li><li><strong>需要修改&#x2F;etc&#x2F;sysctl.conf来更改内核参数</strong></li></ul></li></ul></li></ol><ul><li><h3 id="Nginx相关命令"><a href="#Nginx相关命令" class="headerlink" title="Nginx相关命令"></a>Nginx相关命令</h3></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line">sudo /usr/local/nginx/sbin/nginx </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建软连接</span></span><br><span class="line">sudo ln -s /usr/local/nginx/sbin/nginx  /usr/bin/nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭</span></span><br><span class="line">sudo nginx -s stop</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">软关闭 (完成任务后退出)</span></span><br><span class="line">sudo nginx -s quit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启 （修改了nginx.conf后需要）</span></span><br><span class="line">sudo nginx -s reload</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试配置信息是否有错误</span></span><br><span class="line">sudo nginx -t</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看进程</span></span><br><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721200645480-1690533939210-1.png" alt="image-20230721200645480"></p><ul><li>配置文件 nginx.conf</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    # 一个server节点对应一台服务器</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;     # 域名</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        </span><br><span class="line">        # 设置接收的最大文件大小</span><br><span class="line">        client_max_body_size   50m;</span><br><span class="line">        location /login&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10000;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /reg&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10001;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /upload&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10002;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /md5&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10003;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /myfiles&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10004;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /dealfile&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10005;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /sharefiles&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10006;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /dealsharefile&#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:10007;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 配置ngxin fastdfs模块</span><br><span class="line">        location /group1/M00&#123;</span><br><span class="line">            root /home/fastdfs/storage/store_data/data;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li><p>反向代理方式是指代理原始服务器来<strong>接受来自Internet的链接请求</strong>，然后将<strong>请求转发给内部网络上的原始</strong></p><p><strong>服务器，并将从原始服务器上得到的结果转发给Internet上请求数据的客户端</strong>。那么顾名思义，<strong>反向代理</strong></p><p><strong>就是位于Internet和原始服务器之间的服务器</strong>，对于客户端来说就表现为一台服务器，客户端所发送的请</p><p>求都是直接发送给反向代理服务器，然后由反向代理服务器统一调配。</p></li></ul></li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721200724395.png" alt="image-20230721200724395"></p><ul><li><p>以代理服务器来接受Internet上的连接请求。</p></li><li><p>将请求转发给内部网络上的服务器。</p></li><li><p>将服务器上得到的结果返回给Internet上连接的客户端。</p></li><li><p>反向代理服务器是为web服务器服务的。</p></li><li><h3 id="域名绑定IP"><a href="#域名绑定IP" class="headerlink" title="域名绑定IP"></a>域名绑定IP</h3></li></ul><p>​一个域名只能绑定一个IP</p><p>​一个IP地址被多个域名绑定</p><ul><li><h3 id="反向代理和负载均衡"><a href="#反向代理和负载均衡" class="headerlink" title="反向代理和负载均衡"></a><strong>反向代理和负载均衡</strong></h3><ul><li><p>反向代理设置</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201254080.png" alt="image-20230721201254080"></p></li><li><p>负载均衡设置</p><ul><li><strong>负载均衡其意思就是分摊到多个操作单元上进行执行</strong> ，不让后面的个别的服务器太累。</li><li><strong>使用轮询的方式</strong></li><li><strong>分配权重 weight</strong>    指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况</li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201305616.png" alt="image-20230721201305616"></p></li></ul></li></ul><hr><h2 id="3-CGI技术"><a href="#3-CGI技术" class="headerlink" title="3.CGI技术"></a>3.CGI技术</h2><ul><li><p>CGI ： <strong>通用网关接口</strong>（<strong>C</strong>ommon <strong>G</strong>ateway <strong>I</strong>nterface&#x2F;<strong>CGI</strong>）<strong>描述了客户端和服务器程序之间传输数据的一种标准</strong>，</p></li><li><p>CGI处理流程：</p><ul><li><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201315761.png" alt="image-20230721201315761"></li></ul></li></ul><blockquote><p>1.客户端向服务器发送请求，通过url</p><p>2.服务器接收数据并解析</p><p>3.nginx不知怎么处理的请求发送给cgi程序 ，创建cgi进程</p><p>4.cgi进程执行：CGI 进程启动<em><strong>*解析器、加载配置(如业务相关配置)、连接其它服务器(如数据库服务器)、 逻辑处理等*</strong></em></p><p>5.CGI 进程将处理结果<em><strong>*通过标准输出、标准错误，传递给 web 服务器*</strong></em></p><p>6.服务器将cgi处理结果发送给客户端，杀死cgi进程</p></blockquote><ul><li><p>弊端</p><ul><li><p>在服务器端CGI进程会被频繁的创建销毁</p></li><li><p>服务器开销大, 效率低</p></li></ul></li><li><p>CGI使用场景</p><ul><li><p>牛客网，网页客户端将数据当做输入传递给后端的cgi程序，cgi程序处理完成之后将结果作为输出返回给客户端</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201323367.png" alt="image-20230721201323367"></p></li><li><p><strong>cgi与server进程的区别：</strong>cgi使用输入输出与客户端进行交互，但是server使用的是http等协议与客户端进行交互</p></li></ul></li></ul><h3 id="1-fastcgi"><a href="#1-fastcgi" class="headerlink" title="1. fastcgi"></a>1. fastcgi</h3><ul><li><p>CGI 使外部程序与 Web 服务器之间交互成为可能，但效率低。</p></li><li><p>FastCGI 致力于减少 Web 服务器 与 CGI 程式之间互动的开销，从而使服务器可以同时处理更多的 Web 请求。与为每个请求 创建一个新的进程不同，FastCGI 使用持续的进程来处理一连串的请求。<strong>这些进程由 FastCGI 进程管理器管理</strong>（例如下面我们要介绍的spawn-fcgi），而不是 web 服务器。</p></li><li><p>cgi 和 fastcgi区别</p><blockquote><ol><li><p>cgi是短生存周期的应用程序，fastcgi 是长生存周期的应用程序，可以一直执行，不用每次都去fork();</p></li><li><p>fastcgi不需要不停的产生新进程，可大大降低服务器压力</p></li></ol><p>总之：cgi 是一个请求对一个进程，FasiCGI就是在后端申请一个进程池，请求来了之后从进程池中取进程，而不用每次创建销毁</p></blockquote><hr><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201330596.png" alt="image-20230721201330596"></p></li><li><p>fastcgi处理流程</p><blockquote><ol><li>客户端发送给服务器请求</li><li>nginx服务器解析请求，发现不会处理转发给fastcgi 通过socket方式</li><li>fastcgi 可以通过ip网络通信或者socket本地套接字两种方式启动，进程管理器初始化，启动多个cgi进程</li><li>FastCGI 主进程选择并连接到一个 CGI 解释器。Web 服务器<em><strong>*将 CGI 环境变量和标准输入发送到 FastCGI 子进程*</strong></em></li><li>FastCGI 子进程处理好了，将结果从同一个socket返回服务器，关闭连接</li><li>子进程等待下一个连接（阻塞状态）</li></ol></blockquote></li><li><p>安装</p><ul><li><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201339777.png" alt="image-20230721201339777"></li></ul></li></ul><h3 id="2-ngx-http-fastcgi-module模块"><a href="#2-ngx-http-fastcgi-module模块" class="headerlink" title="2. ngx_http_fastcgi_module模块"></a>2. ngx_http_fastcgi_module模块</h3><blockquote><p>fastcgi进程由FastCGI进程管理器管理，而不是nginx。这样就需要一个FastCGI管理，管理我们编写fastcgi程序。我们使用spawn-fcgi作为FastCGI进程管理器。</p></blockquote><ul><li>nginx上安装这个模块，通过fastcgi协议将客户端请求转发给spawn-fcgi处理</li><li>工作原理<br>Web浏览器通过HTTP请求将数据发送给Nginx，但是Nginx的数据都是HTTP格式的，那么FastCGI如何处理这些数据呢？<br>此时ngx_http_fastcgi_module模块会将Nginx的HTTP协议转换为fastcgi协议，然后将数据转发给FastCGI程序进行处理</li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201346464.png" alt="image-20230721201346464"></p><ul><li><p>在nginx.conf中配置</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201354963.png" alt="image-20230721201354963"></p></li><li><p>nginx如何进行数据转发</p><ul><li><ol><li>请求的url<code>http://localhost/login?user=zhang3&amp;passwd=123456&amp;age=12&amp;sex=man</code>转换为一个指令</li></ol><ul><li>去掉协议</li><li>去掉IP和端口</li><li>去掉文件名</li><li>去掉？ 和后面的字符串</li><li>留下的&#x2F;login 是 服务器要处理的指令</li></ul><ol start="2"><li><p>转发给fastcgi </p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201400021.png" alt="image-20230721201400021"></p></li></ol></li></ul></li></ul><h3 id="3-fastcgi通信协议"><a href="#3-fastcgi通信协议" class="headerlink" title="3.fastcgi通信协议"></a>3.fastcgi通信协议</h3><ul><li>二进制连续传递</li><li>定义统一结构消息，用来读取每个消息的消息体，方便切割</li><li>类型</li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201406004.png" alt="image-20230721201406004"></p><ul><li><p>传递过程</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201421475.png" alt="image-20230721201421475"></p></li><li><p>数据包格式</p><ul><li>头部+包体</li><li>header 8 字节</li><li>body 8的整数倍</li></ul></li></ul><h3 id="4-spawn-fcgi-进程管理器"><a href="#4-spawn-fcgi-进程管理器" class="headerlink" title="4. spawn-fcgi (进程管理器)"></a>4. spawn-fcgi (进程管理器)</h3><blockquote><p>由于FastCGI进程由FastCGI进程管理器管理，而不是Nginx。这样就<strong>需要一个 FastCGI 进程管理器，管理我们编写 FastCGI 程序</strong></p></blockquote><ul><li><p><strong>spawn-fcgi 使用 pre-fork 模型，</strong>功能主要是打开监听端口，绑定地址，然后 fork-and-exec 创建我们编写的 FastCGI 应用程序进程，退出完成工作。FastCGI 应用程序初始化，然后进入死循环侦听 socket 的连接请求</p></li><li><h3 id="FastCGI-协议、spawn-fcgi、Nginx-三者关系"><a href="#FastCGI-协议、spawn-fcgi、Nginx-三者关系" class="headerlink" title="FastCGI 协议、spawn-fcgi、Nginx 三者关系"></a>FastCGI 协议、spawn-fcgi、Nginx 三者关系</h3><ul><li><p>NGINX -&gt; web服务器 ，http协议输入输出</p></li><li><p>spawn-fcgi -&gt; fastcgi协议的输入输出</p></li><li><p>直接由Nginx将HTTP协议转换为Fastcgi协议传输给fastCGI进程处理</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201439835.png" alt="image-20230721201439835"></p></li></ul></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar zxf spawn-fcgi-1.6.4.tar.gz</span><br><span class="line">cd</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">**？启动！</span></span><br><span class="line">spawn-fcgi -a 0.0.0.0 -p 8000 -f ./echo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参考https://dongshao.blog.csdn.net/article/details/106321820</span></span><br></pre></td></tr></table></figure><ul><li>安装完成之后，spawn-fcgi程序被安装在了&#x2F;usr&#x2F;local&#x2F;bin&#x2F;目录下</li></ul></li><li><p>编程演示</p><ul><li><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201450427.png" alt="image-20230721201450427"></li></ul></li><li><p>参考<a href="https://dongshao.blog.csdn.net/article/details/106321820">https://dongshao.blog.csdn.net/article/details/106321820</a></p></li><li><h3 id="修改Nginx配置文件"><a href="#修改Nginx配置文件" class="headerlink" title="修改Nginx配置文件"></a>修改Nginx配置文件</h3><ul><li><code>sudo vim /usr/local/nginx/conf/nginx.conf</code></li><li><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201502184.png" alt="image-20230721201502184"></li></ul></li></ul><hr><h2 id="4-FastDFS技术"><a href="#4-FastDFS技术" class="headerlink" title="4.FastDFS技术"></a>4.FastDFS技术</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ul><li><p>yuqing开发的 c语言， 开源， 分布式系统</p></li><li><p>用来搭建文件服务器集群提供文件上传、下载等功能</p></li><li><p>三个角色</p><ul><li>追踪器 – tracker</li><li>存储节点 – storage</li><li>客户端 – client</li></ul></li><li><p>fastDFS三个角色之间的关系</p><blockquote><p>Client和Storage主动连接Tracker<br>Storage主动向Tracker报告其状态信息<br>磁盘剩余空间<br>文件同步状况<br>文件上传下载次数<br>Storage会启动一个单独的线程来完成对一台Tracker的连接和定时报告<br>一个组包含的Storage不是通过配置文件设定的，而是通过Tracker获取到的</p></blockquote></li><li><h2 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h2><ul><li>文件系统的全部任务不在同一台主机上，在很多台主机上多个分散的文件系统组合在一起，形成了一个完整的文件系统</li><li>🥚不放在一个篮子里</li></ul></li></ul><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><ul><li>先装libfastcommon库，用来操作dfs</li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201509732.png" alt="image-20230721201509732"></p><h3 id="3-FastDFS集群搭建"><a href="#3-FastDFS集群搭建" class="headerlink" title="3. FastDFS集群搭建"></a>3. FastDFS集群搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.第一步（复制配置文件）</span></span><br><span class="line">fastdfs的默认配置文件存放在/etc/fdfs/目录下</span><br><span class="line">ls /etc/fdfs</span><br><span class="line"> </span><br><span class="line">sudo cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br><span class="line"> </span><br><span class="line">sudo cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br><span class="line"> </span><br><span class="line">sudo cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf</span><br><span class="line"> </span><br><span class="line">ls /etc/fdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.第二步（配置启动tracker端）</span></span><br><span class="line">自己在/home下创建个fastdfs目录</span><br><span class="line">mkdir tracker</span><br><span class="line">修改/etc/fdfs/目录下的trakcer.conf配置文件，用来启动tracker端。</span><br><span class="line">sudo vim /etc/fdfs/tracker.conf</span><br><span class="line">改：base_path : tracker节点信息</span><br><span class="line">启动tracker服务端，并查看是否启动成功：</span><br><span class="line">sudo fdfs_trackerd /etc/fdfs/tracker.conf</span><br><span class="line">netstat -aptn | grep 22122</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.第三步（配置启动storage端）</span></span><br><span class="line">在fastdfs目录下创建一个storage目录，用来存放与storage端的信息</span><br><span class="line">mkdir  storage </span><br><span class="line">修改/etc/fdfs/目录下的storage.conf配置文件，用来启动tracker端。</span><br><span class="line">sudo vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201516023.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">启动storage节点，并查看是否启动成功：</span><br><span class="line">sudo fdfs_storaged /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">过10秒左右再查看（因为storage需要创建很多目录）</span></span><br><span class="line">netstat -aptn | grep 23000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4第四步（修改客户端配置文件）</span></span><br><span class="line">在fastdfs目录下创建一个client目录，用来存放与client端的信息（此处的client就是我们的FastCGI后台服务进程）</span><br><span class="line">修改/etc/fdfs/目录下的client.conf文件</span><br><span class="line">sudo vim /etc/fdfs/client.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201530494.png" alt="image-20230721201530494"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检测集群状态</span><br><span class="line">fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure><h3 id="4-添加FastDFS相关的配置文件"><a href="#4-添加FastDFS相关的配置文件" class="headerlink" title="4. 添加FastDFS相关的配置文件"></a>4. 添加FastDFS相关的配置文件</h3><ul><li>将fastdfds-nginx-module模块源码包中的<strong>src目录下的mod_fastdfs.conf文件拷贝一份到&#x2F;etc&#x2F;fdfs目录下。</strong></li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201542772.png" alt="image-20230721201542772"><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201551386.png" alt="image-20230721201551386"><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201557932.png" alt="image-20230721201557932"></p><ul><li><p><strong>将fastdfs源码目录conf&#x2F;目录下的http.conf、mime.types</strong>也复制到&#x2F;etc&#x2F;fdfs&#x2F;目录下。</p></li><li><h3 id="修改Nginx配置文件-1"><a href="#修改Nginx配置文件-1" class="headerlink" title="修改Nginx配置文件"></a>修改Nginx配置文件</h3><ul><li><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201605994.png" alt="image-20230721201605994"></li></ul></li></ul><h2 id="5-Redis"><a href="#5-Redis" class="headerlink" title="5.Redis"></a>5.Redis</h2><ul><li><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p></li><li><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</p></li><li><p>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</p></li><li><p>Redis支持数据的备份，即master-slave模式的数据备份。</p></li><li><p>优点</p><blockquote><p><strong>性能极高</strong> – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。<br>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。<br>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。<br>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</p></blockquote></li><li><p>关系型数据库和非关系型数据库</p><ul><li>数据库一般分为关系型数据库和非关系型数据库，Redis是非关系型数据库；</li></ul></li><li><p>安装</p><ul><li><p>hiredis - 用于提供操作redis的API, 要安装</p><p>参看<a href="https://blog.csdn.net/qq_41453285/article/details/106355155">https://blog.csdn.net/qq_41453285/article/details/106355155</a></p></li></ul></li></ul><img src="./网盘项目笔记.assets/image-20230721201612762.png" alt="image-20230721201612762" style="zoom:67%;" /><h2 id="6-MySQL"><a href="#6-MySQL" class="headerlink" title="6. MySQL"></a>6. MySQL</h2><ul><li><p>存储文件，用户信息</p></li><li><p>安装：<a href="https://blog.csdn.net/weixin_44816732/article/details/104173717">https://blog.csdn.net/weixin_44816732/article/details/104173717</a> ， bilibili - 尚硅谷MySQL课程高级篇</p></li><li><p>开启ssh, navicatpremium 连接MySQL，</p></li><li><p>建表-执行脚本 source .&#x2F;cloud_disk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">DROP database IF EXISTS `cloud_disk`;</span><br><span class="line">CREATE DATABASE `cloud_disk`;</span><br><span class="line"></span><br><span class="line">use `cloud_disk`;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `file_info`;</span><br><span class="line">CREATE TABLE `file_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;文件序号，自动递增，主键&#x27;,</span><br><span class="line">  `md5` varchar(256) NOT NULL COMMENT &#x27;文件md5&#x27;,</span><br><span class="line">  `file_id` varchar(256) NOT NULL COMMENT &#x27;文件id:/group1/M00/00/00/xxx.png&#x27;,</span><br><span class="line">  `url` varchar(512) NOT NULL COMMENT &#x27;文件url 192.168.52.139:80/group1/M00/00/00/xxx.png&#x27;,</span><br><span class="line">  `size` bigint(20) DEFAULT &#x27;0&#x27; COMMENT &#x27;文件大小, 以字节为单位&#x27;,</span><br><span class="line">  `type` varchar(32) DEFAULT &#x27;&#x27; COMMENT &#x27;文件类型： png, zip, mp4……&#x27;,</span><br><span class="line">  `count` int(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;文件引用计数,默认为1。每增加一个用户拥有此文件，此计数器+1&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8 COMMENT=&#x27;文件信息表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `share_file_list`;</span><br><span class="line">CREATE TABLE `share_file_list` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;编号&#x27;,</span><br><span class="line">  `user` varchar(32) NOT NULL COMMENT &#x27;文件所属用户&#x27;,</span><br><span class="line">  `md5` varchar(256) NOT NULL COMMENT &#x27;文件md5&#x27;,</span><br><span class="line">  `file_name` varchar(128) DEFAULT NULL COMMENT &#x27;文件名字&#x27;,</span><br><span class="line">  `pv` int(11) DEFAULT &#x27;1&#x27; COMMENT &#x27;文件下载量，默认值为1，下载一次加1&#x27;,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;文件共享时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 COMMENT=&#x27;共享文件列表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `user_file_count`;</span><br><span class="line">CREATE TABLE `user_file_count` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user` varchar(128) NOT NULL COMMENT &#x27;文件所属用户&#x27;,</span><br><span class="line">  `count` int(11) DEFAULT NULL COMMENT &#x27;拥有文件的数量&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `user_UNIQUE` (`user`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT=&#x27;用户文件数量表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `user_file_list`;</span><br><span class="line">CREATE TABLE `user_file_list` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;编号&#x27;,</span><br><span class="line">  `user` varchar(32) NOT NULL COMMENT &#x27;文件所属用户&#x27;,</span><br><span class="line">  `md5` varchar(256) NOT NULL COMMENT &#x27;文件md5&#x27;,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;文件创建时间&#x27;,</span><br><span class="line">  `file_name` varchar(128) DEFAULT NULL COMMENT &#x27;文件名字&#x27;,</span><br><span class="line">  `shared_status` int(11) DEFAULT NULL COMMENT &#x27;共享状态, 0为没有共享， 1为共享&#x27;,</span><br><span class="line">  `pv` int(11) DEFAULT NULL COMMENT &#x27;文件下载量，默认值为0，下载一次加1&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8 COMMENT=&#x27;用户文件列表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `user_info`;</span><br><span class="line">CREATE TABLE `user_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;用户序号，自动递增，主键&#x27;,</span><br><span class="line">  `user_name` varchar(32) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;用户名称&#x27;,</span><br><span class="line">  `nick_name` varchar(32) CHARACTER SET utf8mb4 NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;用户昵称&#x27;,</span><br><span class="line">  `password` varchar(32) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `phone` varchar(16) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;手机号码&#x27;,</span><br><span class="line">  `email` varchar(64) DEFAULT &#x27;&#x27; COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uq_nick_name` (`nick_name`),</span><br><span class="line">  UNIQUE KEY `uq_user_name` (`user_name`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT=&#x27;用户信息表&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201624828.png" alt="image-20230721201624828"></p><hr><h2 id="7-功能阐述"><a href="#7-功能阐述" class="headerlink" title="7. 功能阐述"></a>7. 功能阐述</h2><h3 id="1-文件上传的代码流程"><a href="#1-文件上传的代码流程" class="headerlink" title="1.文件上传的代码流程"></a>1.文件上传的代码流程</h3><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230721201638040.png" alt="image-20230721201638040"> </p><hr><h3 id="2-注册功能的实现"><a href="#2-注册功能的实现" class="headerlink" title="2. 注册功能的实现"></a>2. 注册功能的实现</h3><h4 id="业务流程："><a href="#业务流程：" class="headerlink" title="业务流程："></a>业务流程：</h4><ul><li>Qt客户端发送HTTP请求给Nginx， Nginx接收到请求后将请求转发给FastCGI， FastCGI通过自己的一些内置的环境变量获取到URL和报文主体进行解析。分析数据，提取数据，MySQL保存用户注册信息。服务器回复json格式响应报文。</li><li>客户端发送的HTTP请求字段：<ul><li>URL </li><li>请求方式：POST</li><li>HTTP版本：1.1</li><li>Content-Type : application&#x2F;json</li></ul></li><li>请求主体：<ul><li>用户名</li><li>密码</li><li>昵称</li><li>手机号</li><li>邮箱</li></ul></li><li>HTTP响应报文主体：code 结果值 002成功 003用户存在 004失败</li></ul><h4 id="QT客户端代码解析-–-注册流程"><a href="#QT客户端代码解析-–-注册流程" class="headerlink" title="QT客户端代码解析 – 注册流程"></a>QT客户端代码解析 – 注册流程</h4><ol><li>用户输入信息 抽取输入数据QString类型</li><li>进行数据校验,判读输入的格式是否正确, 使用QRegExp类</li><li>调用setRegisterJson()函数将输入转换为JSON格式 (作为请求报文主体)<ul><li>里面使用了QMap数据类型,形成K-V键值对. <code>QMap&lt;QString, QVariant&gt;</code></li><li>然后将QMap类型转换为QJsonDocument类  调用<code>QJsonDocument::fromVariant()</code> 类成员函数.</li></ul></li><li>开始构造连接服务器的URL和请求报文 <code>QString url</code> ; 将报文头和主体发送出去 <code>QNetworkRequset request</code>  , <code>request.seturl(QUrl(url));</code></li><li>等待服务器回传的消息 JSON格式, 解析code字符串,做判断.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//----QT端---</span></span><br><span class="line"><span class="comment">// 用户注册操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Login::on_register_btn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 从控件中取出用户输入的数据 QString类型</span></span><br><span class="line">    QString userName = ui-&gt;reg_usr-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString nickName = ui-&gt;reg_nickname-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString firstPwd = ui-&gt;reg_pwd-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString surePwd = ui-&gt;reg_surepwd-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString phone = ui-&gt;reg_phone-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString email = ui-&gt;reg_mail-&gt;<span class="built_in">text</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据校验</span></span><br><span class="line">    <span class="function">QRegExp <span class="title">regexp</span><span class="params">(USER_REG)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!regexp.<span class="built_in">exactMatch</span>(userName))</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;用户名格式不正确&quot;</span>);</span><br><span class="line">        ui-&gt;reg_usr-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;reg_usr-&gt;<span class="built_in">setFocus</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!regexp.<span class="built_in">exactMatch</span>(nickName))</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;昵称格式不正确&quot;</span>);</span><br><span class="line">        ui-&gt;reg_nickname-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;reg_nickname-&gt;<span class="built_in">setFocus</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    regexp.<span class="built_in">setPattern</span>(PASSWD_REG);</span><br><span class="line">    <span class="keyword">if</span>(!regexp.<span class="built_in">exactMatch</span>(firstPwd))</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;密码格式不正确&quot;</span>);</span><br><span class="line">        ui-&gt;reg_pwd-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;reg_pwd-&gt;<span class="built_in">setFocus</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(surePwd != firstPwd)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;两次输入的密码不匹配, 请重新输入&quot;</span>);</span><br><span class="line">        ui-&gt;reg_surepwd-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;reg_surepwd-&gt;<span class="built_in">setFocus</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    regexp.<span class="built_in">setPattern</span>(PHONE_REG);</span><br><span class="line">    <span class="keyword">if</span>(!regexp.<span class="built_in">exactMatch</span>(phone))</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;手机号码格式不正确&quot;</span>);</span><br><span class="line">        ui-&gt;reg_phone-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;reg_phone-&gt;<span class="built_in">setFocus</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    regexp.<span class="built_in">setPattern</span>(EMAIL_REG);</span><br><span class="line">    <span class="keyword">if</span>(!regexp.<span class="built_in">exactMatch</span>(email))</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;警告&quot;</span>, <span class="string">&quot;邮箱码格式不正确&quot;</span>);</span><br><span class="line">        ui-&gt;reg_mail-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        ui-&gt;reg_mail-&gt;<span class="built_in">setFocus</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将注册信息打包为json格式</span></span><br><span class="line">    QByteArray array = <span class="built_in">setRegisterJson</span>(userName, nickName, m_cm.<span class="built_in">getStrMd5</span>(firstPwd), phone, email);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;register json data&quot;</span> &lt;&lt; array;</span><br><span class="line">    <span class="comment">// 设置连接服务器要发送的url</span></span><br><span class="line">    QNetworkRequest request;</span><br><span class="line">    QString url = <span class="built_in">QString</span>(<span class="string">&quot;http://%1:%2/reg&quot;</span>).<span class="built_in">arg</span>(ui-&gt;address_server-&gt;<span class="built_in">text</span>()).<span class="built_in">arg</span>(ui-&gt;port_server-&gt;<span class="built_in">text</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;url:&quot;</span> &lt;&lt; url;</span><br><span class="line"></span><br><span class="line">    request.<span class="built_in">setUrl</span>(<span class="built_in">QUrl</span>(url));</span><br><span class="line">    <span class="comment">// 设置请求头</span></span><br><span class="line">    request.<span class="built_in">setHeader</span>(QNetworkRequest::ContentTypeHeader, <span class="built_in">QVariant</span>(<span class="string">&quot;application/json&quot;</span>));</span><br><span class="line">    request.<span class="built_in">setHeader</span>(QNetworkRequest::ContentLengthHeader, <span class="built_in">QVariant</span>(array.<span class="built_in">size</span>()));</span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    QNetworkReply* reply = m_manager-&gt;<span class="built_in">post</span>(request, array);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断请求是否被成功处理</span></span><br><span class="line">    <span class="built_in">connect</span>(reply, &amp;QNetworkReply::readyRead, [=]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读sever回写的数据</span></span><br><span class="line">        QByteArray jsonData = reply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        注册 - server端返回的json格式数据：</span></span><br><span class="line"><span class="comment">            成功:         &#123;&quot;code&quot;:&quot;002&quot;&#125;</span></span><br><span class="line"><span class="comment">            该用户已存在：  &#123;&quot;code&quot;:&quot;003&quot;&#125;</span></span><br><span class="line"><span class="comment">            失败:         &#123;&quot;code&quot;:&quot;004&quot;&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 判断状态码</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;002&quot;</span> == m_cm.<span class="built_in">getCode</span>(jsonData))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//注册成功</span></span><br><span class="line">            QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;注册成功&quot;</span>, <span class="string">&quot;注册成功，请登录&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//清空行编辑内容</span></span><br><span class="line">            ui-&gt;reg_usr-&gt;<span class="built_in">clear</span>();</span><br><span class="line">            ui-&gt;reg_nickname-&gt;<span class="built_in">clear</span>();</span><br><span class="line">            ui-&gt;reg_pwd-&gt;<span class="built_in">clear</span>();</span><br><span class="line">            ui-&gt;reg_surepwd-&gt;<span class="built_in">clear</span>();</span><br><span class="line">            ui-&gt;reg_phone-&gt;<span class="built_in">clear</span>();</span><br><span class="line">            ui-&gt;reg_mail-&gt;<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置登陆窗口的登陆信息</span></span><br><span class="line">            ui-&gt;log_usr-&gt;<span class="built_in">setText</span>(userName);</span><br><span class="line">            ui-&gt;log_pwd-&gt;<span class="built_in">setText</span>(firstPwd);</span><br><span class="line">            ui-&gt;rember_pwd-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//切换到登录界面</span></span><br><span class="line">            ui-&gt;stackedWidget-&gt;<span class="built_in">setCurrentWidget</span>(ui-&gt;login_page);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;003&quot;</span> == m_cm.<span class="built_in">getCode</span>(jsonData))</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;注册失败&quot;</span>, <span class="built_in">QString</span>(<span class="string">&quot;[%1]该用户已经存在!!!&quot;</span>).<span class="built_in">arg</span>(userName));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;004&quot;</span> == m_cm.<span class="built_in">getCode</span>(jsonData))</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;注册失败&quot;</span>, <span class="string">&quot;注册失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        <span class="keyword">delete</span> reply;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务器端代码解析-–-注册流程"><a href="#服务器端代码解析-–-注册流程" class="headerlink" title="服务器端代码解析 – 注册流程"></a>服务器端代码解析 – 注册流程</h4><ol><li>服务器端: Nginx + fastCGI处理</li><li>在Nginx配置文件中设置注册&#x2F;reg的转发端口10001, 请求会转发给FastCGI. (fcgi.sh 脚本中会设置端口 对应 .&#x2F;bin_cgi&#x2F;register 程序的地址) </li><li><strong>查看reg_cgi.c的main函数</strong><ol><li>使用“CONTENT_LENGTH”环境变量获取请求报文主体. 若为空就报错</li><li>若请求报文有内容, 就调用fread()从Nginx中读取HTTP请求报文的所有内容(从输入缓冲读取I&#x2F;O函数缓冲 or 套接字缓冲,buf)，然后调用user_register()函数在服务端注册该用户。</li><li>获取MySQL数据库的IP,端口</li><li><code>get_reg_info()</code> : 调用JSON的C API提取JSON数据, 获取用户名等信息.</li><li>连接MySQL</li><li>若用户不存在, 构造SQL语句, 将用户数据插入到<code>user_info</code> 表中.</li><li>若注册成功, 构造字符串out , 然后将字符串构造为JSON格式 </li><li>out返回给Nginx. Nginx返回给客户端</li></ol></li></ol><blockquote><p>用户密码加密 – MD5加密 </p><p>MD5: 信息-摘要算法 5 , 确保信息传输完整一致. 又叫哈希算法.</p><p>MD5 不可逆, 本意用来校验数据的完整性, 用于明文密码加密</p><p>在Nginx中安装了 openssl 插件 用于进行MD5加密</p></blockquote><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230726213206684.png" alt="image-20230726213206684"></p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230726213544307.png" alt="image-20230726213544307"></p><hr><h3 id="3-登录功能的实现"><a href="#3-登录功能的实现" class="headerlink" title="3.登录功能的实现"></a>3.登录功能的实现</h3><p>登录的时候会发送3个URL请求报文给服务器端</p><ul><li>&#x2F;login URL ： 判断用户账号和密码是否正确</li><li>&#x2F;myfile？cmd&#x3D;count URL : 登录成功后，Qt客户端再发送一个请求获得自己的文件数量</li><li>&#x2F;myfile？cmd&#x3D;normal：获取文件</li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230728102524983.png" alt="image-20230728102524983"></p><p>服务器会给客户端发送HTTP响应报文：</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230728102505678.png" alt="image-20230728102505678"></p><ul><li>服务器生成token令牌，存在Redis，还发给客户端，以后客户端再发送请求时，就在报文主体里只加上token，和用户名，这样服务器可以和自己保存的token比较。不用每次都去验证各种信息，节省HTTP传输资源。</li></ul><h4 id="登录业务流程："><a href="#登录业务流程：" class="headerlink" title="登录业务流程："></a>登录业务流程：</h4><ul><li>Qt客户端通过发送一个HTTP请求给Nginx（URL以login结尾），Nginx接收到这个请求将请求传递给FastCGI，FastCGI通过自己一些内置的环境变量获取到URL和报文主体进行解析。</li></ul><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230728103336118.png" alt="image-20230728103336118"></p><h4 id="Qt客户端代码解析"><a href="#Qt客户端代码解析" class="headerlink" title="Qt客户端代码解析"></a>Qt客户端代码解析</h4><ol><li>从文本框中获取用户名、密码、服务器端地址</li><li>判断用户信息的格式是否正确</li><li>把登录信息加密，设置URL 发送给服务器端</li><li>等待服务器响应，code ：000 成功，</li><li>获取用户文件列表 会调用refreshFiles()函数</li><li>refreshFiles()函数构造一个&#x2F;myfiles?cmd&#x3D;count URL给服务端，来获得自己在服务端拥有的文件数量</li><li>获得自己的文件数量之后，调用getUserFilesList()函数获得文件的所有内容</li></ol><h4 id="服务器端代码解析"><a href="#服务器端代码解析" class="headerlink" title="服务器端代码解析"></a>服务器端代码解析</h4><ol><li>服务器接收到登录和获取文件的请求URL后，会调用两个FastCGI （在Nginx配置文件里用location 声明），在启动FastCGI时会在脚本里设置端口转到的cgi程序。</li><li>没有请求就阻塞，通过<code>CONTENT_LENGTH</code> 环境变量来获取HTTP请求主体是否有内容，有内容才进一步分析。</li><li>调用fread（）从Nginx读取读取数据，从标准输入(web服务器)读取内容, 读取的就是用户的登录信息。调用get_login_info()函数获取登录用户的用户名和密码。再调用check_user_pwd() 从MySQL判断这个用户的相关信息是否正确。</li><li>如果登录信息正确。调用set_token()给这个客户端随机生成一个token保存在redis中，然后调用return_login_status()给前端返回数据。</li><li>当服务器发现客户端发来的URL以myfiles结尾，会调用myfiles_cgi.c程序，处理文件。</li></ol><blockquote><p>token验证：</p><p>token：令牌， 本质是HTTP session，是用户自定义的任意字符串，只有客户端和服务器知道，成为两者之间的密钥，让服务器确认对方身份。</p><p>流程：</p><ol><li>客户端首次登录</li><li>服务器验证用户名和密码</li><li>成功后，服务器生成token，可以存储在内存、磁盘、数据库，把token发给客户端</li><li>客户端收到token存起来，放在cookie，本地存储</li><li>客户端每次向服务端请求时，在报文主体加入token</li><li>服务器收到请求，去验证token。</li></ol><p>Base64 ：</p><p>它是一种用64个字符来表示任意二进制数据的方法，常用在URL、Cookie、网页中传输少量二进制数据。</p><p>Base64要求把每三个8bit的字节转换成四个6bit的字节（4*6 &#x3D; 24）再把6bit的高位添2个0，组成四个8bit的字节。</p><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230728161001926.png" alt="image-20230728161001926"></p></blockquote><h3 id="4-上传文件"><a href="#4-上传文件" class="headerlink" title="4. 上传文件"></a>4. 上传文件</h3><p>HTTP请求字段：</p><ul><li>URL：<a href="http://xxx.xxx.xxx.xxx/upload">http://xxx.xxx.xxx.xxx/upload</a></li><li>请求方式：POST</li><li>HTTP版本：1.1</li><li>Content-Type ：application&#x2F;octet-stream</li></ul><p>HTTP请求主体：</p><table><thead><tr><th align="center">参数名</th><th>含义</th><th align="center">规则</th></tr></thead><tbody><tr><td align="center">token</td><td>密码</td><td align="center">md5加密后的值</td></tr></tbody></table><p>HTTP响应报文主体：</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">规则</th></tr></thead><tbody><tr><td align="center">code</td><td align="center">结果集</td><td align="center">008 ：上传失败   009：成功</td></tr></tbody></table><p><img src="/./%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0.assets/image-20230728162651560.png" alt="image-20230728162651560"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
